// Code generated by Prisma (prisma@1.27.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateBook {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserBook {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Book {
  id: ID!
  title: String!
  isbn: String!
  author: String
  cover: String
  publisher: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  title: String!
  isbn: String!
  author: String
  cover: String
  publisher: String
  description: String
}

input BookCreateOneInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
}

type BookEdge {
  node: Book!
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  isbn_ASC
  isbn_DESC
  author_ASC
  author_DESC
  cover_ASC
  cover_DESC
  publisher_ASC
  publisher_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookPreviousValues {
  id: ID!
  title: String!
  isbn: String!
  author: String
  cover: String
  publisher: String
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookWhereInput
  AND: [BookSubscriptionWhereInput!]
  OR: [BookSubscriptionWhereInput!]
  NOT: [BookSubscriptionWhereInput!]
}

input BookUpdateDataInput {
  title: String
  isbn: String
  author: String
  cover: String
  publisher: String
  description: String
}

input BookUpdateInput {
  title: String
  isbn: String
  author: String
  cover: String
  publisher: String
  description: String
}

input BookUpdateManyMutationInput {
  title: String
  isbn: String
  author: String
  cover: String
  publisher: String
  description: String
}

input BookUpdateOneRequiredInput {
  create: BookCreateInput
  update: BookUpdateDataInput
  upsert: BookUpsertNestedInput
  connect: BookWhereUniqueInput
}

input BookUpsertNestedInput {
  update: BookUpdateDataInput!
  create: BookCreateInput!
}

input BookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  isbn: String
  isbn_not: String
  isbn_in: [String!]
  isbn_not_in: [String!]
  isbn_lt: String
  isbn_lte: String
  isbn_gt: String
  isbn_gte: String
  isbn_contains: String
  isbn_not_contains: String
  isbn_starts_with: String
  isbn_not_starts_with: String
  isbn_ends_with: String
  isbn_not_ends_with: String
  author: String
  author_not: String
  author_in: [String!]
  author_not_in: [String!]
  author_lt: String
  author_lte: String
  author_gt: String
  author_gte: String
  author_contains: String
  author_not_contains: String
  author_starts_with: String
  author_not_starts_with: String
  author_ends_with: String
  author_not_ends_with: String
  cover: String
  cover_not: String
  cover_in: [String!]
  cover_not_in: [String!]
  cover_lt: String
  cover_lte: String
  cover_gt: String
  cover_gte: String
  cover_contains: String
  cover_not_contains: String
  cover_starts_with: String
  cover_not_starts_with: String
  cover_ends_with: String
  cover_not_ends_with: String
  publisher: String
  publisher_not: String
  publisher_in: [String!]
  publisher_not_in: [String!]
  publisher_lt: String
  publisher_lte: String
  publisher_gt: String
  publisher_gte: String
  publisher_contains: String
  publisher_not_contains: String
  publisher_starts_with: String
  publisher_not_starts_with: String
  publisher_ends_with: String
  publisher_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
}

input BookWhereUniqueInput {
  id: ID
  isbn: String
}

scalar DateTime

enum FeedStatus {
  CURRENT_READING
  READ
  WANT_TO_READ
}

scalar Long

type Mutation {
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserBook(data: UserBookCreateInput!): UserBook!
  updateUserBook(data: UserBookUpdateInput!, where: UserBookWhereUniqueInput!): UserBook
  updateManyUserBooks(data: UserBookUpdateManyMutationInput!, where: UserBookWhereInput): BatchPayload!
  upsertUserBook(where: UserBookWhereUniqueInput!, create: UserBookCreateInput!, update: UserBookUpdateInput!): UserBook!
  deleteUserBook(where: UserBookWhereUniqueInput!): UserBook
  deleteManyUserBooks(where: UserBookWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  user: User!
  userBook: UserBook!
  likes: Int!
  backgroundTheme: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  user: UserCreateOneWithoutPostsInput!
  userBook: UserBookCreateOneWithoutPostsInput!
  likes: Int
  backgroundTheme: String
  content: String
}

input PostCreateManyWithoutUserBookInput {
  create: [PostCreateWithoutUserBookInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutUserBookInput {
  user: UserCreateOneWithoutPostsInput!
  likes: Int
  backgroundTheme: String
  content: String
}

input PostCreateWithoutUserInput {
  userBook: UserBookCreateOneWithoutPostsInput!
  likes: Int
  backgroundTheme: String
  content: String
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  likes_ASC
  likes_DESC
  backgroundTheme_ASC
  backgroundTheme_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  id: ID!
  likes: Int!
  backgroundTheme: String
  content: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  backgroundTheme: String
  backgroundTheme_not: String
  backgroundTheme_in: [String!]
  backgroundTheme_not_in: [String!]
  backgroundTheme_lt: String
  backgroundTheme_lte: String
  backgroundTheme_gt: String
  backgroundTheme_gte: String
  backgroundTheme_contains: String
  backgroundTheme_not_contains: String
  backgroundTheme_starts_with: String
  backgroundTheme_not_starts_with: String
  backgroundTheme_ends_with: String
  backgroundTheme_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  userBook: UserBookUpdateOneRequiredWithoutPostsInput
  likes: Int
  backgroundTheme: String
  content: String
}

input PostUpdateManyDataInput {
  likes: Int
  backgroundTheme: String
  content: String
}

input PostUpdateManyMutationInput {
  likes: Int
  backgroundTheme: String
  content: String
}

input PostUpdateManyWithoutUserBookInput {
  create: [PostCreateWithoutUserBookInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserBookInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserBookInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutUserInput {
  create: [PostCreateWithoutUserInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutUserBookDataInput {
  user: UserUpdateOneRequiredWithoutPostsInput
  likes: Int
  backgroundTheme: String
  content: String
}

input PostUpdateWithoutUserDataInput {
  userBook: UserBookUpdateOneRequiredWithoutPostsInput
  likes: Int
  backgroundTheme: String
  content: String
}

input PostUpdateWithWhereUniqueWithoutUserBookInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserBookDataInput!
}

input PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutUserDataInput!
}

input PostUpsertWithWhereUniqueWithoutUserBookInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserBookDataInput!
  create: PostCreateWithoutUserBookInput!
}

input PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutUserDataInput!
  create: PostCreateWithoutUserInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  userBook: UserBookWhereInput
  likes: Int
  likes_not: Int
  likes_in: [Int!]
  likes_not_in: [Int!]
  likes_lt: Int
  likes_lte: Int
  likes_gt: Int
  likes_gte: Int
  backgroundTheme: String
  backgroundTheme_not: String
  backgroundTheme_in: [String!]
  backgroundTheme_not_in: [String!]
  backgroundTheme_lt: String
  backgroundTheme_lte: String
  backgroundTheme_gt: String
  backgroundTheme_gte: String
  backgroundTheme_contains: String
  backgroundTheme_not_contains: String
  backgroundTheme_starts_with: String
  backgroundTheme_not_starts_with: String
  backgroundTheme_ends_with: String
  backgroundTheme_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userBook(where: UserBookWhereUniqueInput!): UserBook
  userBooks(where: UserBookWhereInput, orderBy: UserBookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserBook]!
  userBooksConnection(where: UserBookWhereInput, orderBy: UserBookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserBookConnection!
  node(id: ID!): Node
}

type Subscription {
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userBook(where: UserBookSubscriptionWhereInput): UserBookSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  email: String!
  password: String
  createdAt: DateTime!
  updatedAt: DateTime!
  books(where: UserBookWhereInput, orderBy: UserBookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserBook!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserBook {
  id: ID!
  user: User!
  book: Book!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  rating: Float
  status: FeedStatus
  readAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserBookConnection {
  pageInfo: PageInfo!
  edges: [UserBookEdge]!
  aggregate: AggregateUserBook!
}

input UserBookCreateInput {
  user: UserCreateOneWithoutBooksInput!
  book: BookCreateOneInput!
  posts: PostCreateManyWithoutUserBookInput
  rating: Float
  status: FeedStatus
  readAt: DateTime!
}

input UserBookCreateManyWithoutUserInput {
  create: [UserBookCreateWithoutUserInput!]
  connect: [UserBookWhereUniqueInput!]
}

input UserBookCreateOneWithoutPostsInput {
  create: UserBookCreateWithoutPostsInput
  connect: UserBookWhereUniqueInput
}

input UserBookCreateWithoutPostsInput {
  user: UserCreateOneWithoutBooksInput!
  book: BookCreateOneInput!
  rating: Float
  status: FeedStatus
  readAt: DateTime!
}

input UserBookCreateWithoutUserInput {
  book: BookCreateOneInput!
  posts: PostCreateManyWithoutUserBookInput
  rating: Float
  status: FeedStatus
  readAt: DateTime!
}

type UserBookEdge {
  node: UserBook!
  cursor: String!
}

enum UserBookOrderByInput {
  id_ASC
  id_DESC
  rating_ASC
  rating_DESC
  status_ASC
  status_DESC
  readAt_ASC
  readAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserBookPreviousValues {
  id: ID!
  rating: Float
  status: FeedStatus
  readAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserBookScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  status: FeedStatus
  status_not: FeedStatus
  status_in: [FeedStatus!]
  status_not_in: [FeedStatus!]
  readAt: DateTime
  readAt_not: DateTime
  readAt_in: [DateTime!]
  readAt_not_in: [DateTime!]
  readAt_lt: DateTime
  readAt_lte: DateTime
  readAt_gt: DateTime
  readAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserBookScalarWhereInput!]
  OR: [UserBookScalarWhereInput!]
  NOT: [UserBookScalarWhereInput!]
}

type UserBookSubscriptionPayload {
  mutation: MutationType!
  node: UserBook
  updatedFields: [String!]
  previousValues: UserBookPreviousValues
}

input UserBookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserBookWhereInput
  AND: [UserBookSubscriptionWhereInput!]
  OR: [UserBookSubscriptionWhereInput!]
  NOT: [UserBookSubscriptionWhereInput!]
}

input UserBookUpdateInput {
  user: UserUpdateOneRequiredWithoutBooksInput
  book: BookUpdateOneRequiredInput
  posts: PostUpdateManyWithoutUserBookInput
  rating: Float
  status: FeedStatus
  readAt: DateTime
}

input UserBookUpdateManyDataInput {
  rating: Float
  status: FeedStatus
  readAt: DateTime
}

input UserBookUpdateManyMutationInput {
  rating: Float
  status: FeedStatus
  readAt: DateTime
}

input UserBookUpdateManyWithoutUserInput {
  create: [UserBookCreateWithoutUserInput!]
  delete: [UserBookWhereUniqueInput!]
  connect: [UserBookWhereUniqueInput!]
  set: [UserBookWhereUniqueInput!]
  disconnect: [UserBookWhereUniqueInput!]
  update: [UserBookUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [UserBookUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [UserBookScalarWhereInput!]
  updateMany: [UserBookUpdateManyWithWhereNestedInput!]
}

input UserBookUpdateManyWithWhereNestedInput {
  where: UserBookScalarWhereInput!
  data: UserBookUpdateManyDataInput!
}

input UserBookUpdateOneRequiredWithoutPostsInput {
  create: UserBookCreateWithoutPostsInput
  update: UserBookUpdateWithoutPostsDataInput
  upsert: UserBookUpsertWithoutPostsInput
  connect: UserBookWhereUniqueInput
}

input UserBookUpdateWithoutPostsDataInput {
  user: UserUpdateOneRequiredWithoutBooksInput
  book: BookUpdateOneRequiredInput
  rating: Float
  status: FeedStatus
  readAt: DateTime
}

input UserBookUpdateWithoutUserDataInput {
  book: BookUpdateOneRequiredInput
  posts: PostUpdateManyWithoutUserBookInput
  rating: Float
  status: FeedStatus
  readAt: DateTime
}

input UserBookUpdateWithWhereUniqueWithoutUserInput {
  where: UserBookWhereUniqueInput!
  data: UserBookUpdateWithoutUserDataInput!
}

input UserBookUpsertWithoutPostsInput {
  update: UserBookUpdateWithoutPostsDataInput!
  create: UserBookCreateWithoutPostsInput!
}

input UserBookUpsertWithWhereUniqueWithoutUserInput {
  where: UserBookWhereUniqueInput!
  update: UserBookUpdateWithoutUserDataInput!
  create: UserBookCreateWithoutUserInput!
}

input UserBookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  book: BookWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  status: FeedStatus
  status_not: FeedStatus
  status_in: [FeedStatus!]
  status_not_in: [FeedStatus!]
  readAt: DateTime
  readAt_not: DateTime
  readAt_in: [DateTime!]
  readAt_not_in: [DateTime!]
  readAt_lt: DateTime
  readAt_lte: DateTime
  readAt_gt: DateTime
  readAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserBookWhereInput!]
  OR: [UserBookWhereInput!]
  NOT: [UserBookWhereInput!]
}

input UserBookWhereUniqueInput {
  id: ID
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  email: String!
  password: String
  books: UserBookCreateManyWithoutUserInput
  posts: PostCreateManyWithoutUserInput
}

input UserCreateOneWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBooksInput {
  username: String!
  email: String!
  password: String
  posts: PostCreateManyWithoutUserInput
}

input UserCreateWithoutPostsInput {
  username: String!
  email: String!
  password: String
  books: UserBookCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  books: UserBookUpdateManyWithoutUserInput
  posts: PostUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutBooksInput {
  create: UserCreateWithoutBooksInput
  update: UserUpdateWithoutBooksDataInput
  upsert: UserUpsertWithoutBooksInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBooksDataInput {
  username: String
  email: String
  password: String
  posts: PostUpdateManyWithoutUserInput
}

input UserUpdateWithoutPostsDataInput {
  username: String
  email: String
  password: String
  books: UserBookUpdateManyWithoutUserInput
}

input UserUpsertWithoutBooksInput {
  update: UserUpdateWithoutBooksDataInput!
  create: UserCreateWithoutBooksInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  books_every: UserBookWhereInput
  books_some: UserBookWhereInput
  books_none: UserBookWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}
`