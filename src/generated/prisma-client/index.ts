// Code generated by Prisma (prisma@1.27.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  book: (where?: BookWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userBook: (where?: UserBookWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  book: (where: BookWhereUniqueInput) => BookPromise;
  books: (
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Book>;
  booksConnection: (
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BookConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  userBook: (where: UserBookWhereUniqueInput) => UserBookPromise;
  userBooks: (
    args?: {
      where?: UserBookWhereInput;
      orderBy?: UserBookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserBook>;
  userBooksConnection: (
    args?: {
      where?: UserBookWhereInput;
      orderBy?: UserBookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserBookConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBook: (data: BookCreateInput) => BookPromise;
  updateBook: (
    args: { data: BookUpdateInput; where: BookWhereUniqueInput }
  ) => BookPromise;
  updateManyBooks: (
    args: { data: BookUpdateManyMutationInput; where?: BookWhereInput }
  ) => BatchPayloadPromise;
  upsertBook: (
    args: {
      where: BookWhereUniqueInput;
      create: BookCreateInput;
      update: BookUpdateInput;
    }
  ) => BookPromise;
  deleteBook: (where: BookWhereUniqueInput) => BookPromise;
  deleteManyBooks: (where?: BookWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserBook: (data: UserBookCreateInput) => UserBookPromise;
  updateUserBook: (
    args: { data: UserBookUpdateInput; where: UserBookWhereUniqueInput }
  ) => UserBookPromise;
  updateManyUserBooks: (
    args: { data: UserBookUpdateManyMutationInput; where?: UserBookWhereInput }
  ) => BatchPayloadPromise;
  upsertUserBook: (
    args: {
      where: UserBookWhereUniqueInput;
      create: UserBookCreateInput;
      update: UserBookUpdateInput;
    }
  ) => UserBookPromise;
  deleteUserBook: (where: UserBookWhereUniqueInput) => UserBookPromise;
  deleteManyUserBooks: (where?: UserBookWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  book: (
    where?: BookSubscriptionWhereInput
  ) => BookSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userBook: (
    where?: UserBookSubscriptionWhereInput
  ) => UserBookSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "isbn_ASC"
  | "isbn_DESC"
  | "author_ASC"
  | "author_DESC"
  | "cover_ASC"
  | "cover_DESC"
  | "publisher_ASC"
  | "publisher_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FeedStatus = "CURRENT_READING" | "READ" | "WANT_TO_READ";

export type UserBookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "status_ASC"
  | "status_DESC"
  | "readAt_ASC"
  | "readAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "likes_ASC"
  | "likes_DESC"
  | "backgroundTheme_ASC"
  | "backgroundTheme_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BookWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  isbn?: String;
}>;

export interface BookWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  isbn?: String;
  isbn_not?: String;
  isbn_in?: String[] | String;
  isbn_not_in?: String[] | String;
  isbn_lt?: String;
  isbn_lte?: String;
  isbn_gt?: String;
  isbn_gte?: String;
  isbn_contains?: String;
  isbn_not_contains?: String;
  isbn_starts_with?: String;
  isbn_not_starts_with?: String;
  isbn_ends_with?: String;
  isbn_not_ends_with?: String;
  author?: String;
  author_not?: String;
  author_in?: String[] | String;
  author_not_in?: String[] | String;
  author_lt?: String;
  author_lte?: String;
  author_gt?: String;
  author_gte?: String;
  author_contains?: String;
  author_not_contains?: String;
  author_starts_with?: String;
  author_not_starts_with?: String;
  author_ends_with?: String;
  author_not_ends_with?: String;
  cover?: String;
  cover_not?: String;
  cover_in?: String[] | String;
  cover_not_in?: String[] | String;
  cover_lt?: String;
  cover_lte?: String;
  cover_gt?: String;
  cover_gte?: String;
  cover_contains?: String;
  cover_not_contains?: String;
  cover_starts_with?: String;
  cover_not_starts_with?: String;
  cover_ends_with?: String;
  cover_not_ends_with?: String;
  publisher?: String;
  publisher_not?: String;
  publisher_in?: String[] | String;
  publisher_not_in?: String[] | String;
  publisher_lt?: String;
  publisher_lte?: String;
  publisher_gt?: String;
  publisher_gte?: String;
  publisher_contains?: String;
  publisher_not_contains?: String;
  publisher_starts_with?: String;
  publisher_not_starts_with?: String;
  publisher_ends_with?: String;
  publisher_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: BookWhereInput[] | BookWhereInput;
  OR?: BookWhereInput[] | BookWhereInput;
  NOT?: BookWhereInput[] | BookWhereInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserBookWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  book?: BookWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  rating?: Float;
  rating_not?: Float;
  rating_in?: Float[] | Float;
  rating_not_in?: Float[] | Float;
  rating_lt?: Float;
  rating_lte?: Float;
  rating_gt?: Float;
  rating_gte?: Float;
  status?: FeedStatus;
  status_not?: FeedStatus;
  status_in?: FeedStatus[] | FeedStatus;
  status_not_in?: FeedStatus[] | FeedStatus;
  readAt?: DateTimeInput;
  readAt_not?: DateTimeInput;
  readAt_in?: DateTimeInput[] | DateTimeInput;
  readAt_not_in?: DateTimeInput[] | DateTimeInput;
  readAt_lt?: DateTimeInput;
  readAt_lte?: DateTimeInput;
  readAt_gt?: DateTimeInput;
  readAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserBookWhereInput[] | UserBookWhereInput;
  OR?: UserBookWhereInput[] | UserBookWhereInput;
  NOT?: UserBookWhereInput[] | UserBookWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  books_every?: UserBookWhereInput;
  books_some?: UserBookWhereInput;
  books_none?: UserBookWhereInput;
  posts_every?: PostWhereInput;
  posts_some?: PostWhereInput;
  posts_none?: PostWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  userBook?: UserBookWhereInput;
  likes?: Int;
  likes_not?: Int;
  likes_in?: Int[] | Int;
  likes_not_in?: Int[] | Int;
  likes_lt?: Int;
  likes_lte?: Int;
  likes_gt?: Int;
  likes_gte?: Int;
  backgroundTheme?: String;
  backgroundTheme_not?: String;
  backgroundTheme_in?: String[] | String;
  backgroundTheme_not_in?: String[] | String;
  backgroundTheme_lt?: String;
  backgroundTheme_lte?: String;
  backgroundTheme_gt?: String;
  backgroundTheme_gte?: String;
  backgroundTheme_contains?: String;
  backgroundTheme_not_contains?: String;
  backgroundTheme_starts_with?: String;
  backgroundTheme_not_starts_with?: String;
  backgroundTheme_ends_with?: String;
  backgroundTheme_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
}>;

export type UserBookWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BookCreateInput {
  title: String;
  isbn: String;
  author?: String;
  cover?: String;
  publisher?: String;
  description?: String;
}

export interface BookUpdateInput {
  title?: String;
  isbn?: String;
  author?: String;
  cover?: String;
  publisher?: String;
  description?: String;
}

export interface BookUpdateManyMutationInput {
  title?: String;
  isbn?: String;
  author?: String;
  cover?: String;
  publisher?: String;
  description?: String;
}

export interface PostCreateInput {
  user: UserCreateOneWithoutPostsInput;
  userBook: UserBookCreateOneWithoutPostsInput;
  likes?: Int;
  backgroundTheme?: String;
  content?: String;
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPostsInput {
  username: String;
  email: String;
  password?: String;
  books?: UserBookCreateManyWithoutUserInput;
}

export interface UserBookCreateManyWithoutUserInput {
  create?: UserBookCreateWithoutUserInput[] | UserBookCreateWithoutUserInput;
  connect?: UserBookWhereUniqueInput[] | UserBookWhereUniqueInput;
}

export interface UserBookCreateWithoutUserInput {
  book: BookCreateOneInput;
  posts?: PostCreateManyWithoutUserBookInput;
  rating?: Float;
  status?: FeedStatus;
  readAt: DateTimeInput;
}

export interface BookCreateOneInput {
  create?: BookCreateInput;
  connect?: BookWhereUniqueInput;
}

export interface PostCreateManyWithoutUserBookInput {
  create?: PostCreateWithoutUserBookInput[] | PostCreateWithoutUserBookInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutUserBookInput {
  user: UserCreateOneWithoutPostsInput;
  likes?: Int;
  backgroundTheme?: String;
  content?: String;
}

export interface UserBookCreateOneWithoutPostsInput {
  create?: UserBookCreateWithoutPostsInput;
  connect?: UserBookWhereUniqueInput;
}

export interface UserBookCreateWithoutPostsInput {
  user: UserCreateOneWithoutBooksInput;
  book: BookCreateOneInput;
  rating?: Float;
  status?: FeedStatus;
  readAt: DateTimeInput;
}

export interface UserCreateOneWithoutBooksInput {
  create?: UserCreateWithoutBooksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutBooksInput {
  username: String;
  email: String;
  password?: String;
  posts?: PostCreateManyWithoutUserInput;
}

export interface PostCreateManyWithoutUserInput {
  create?: PostCreateWithoutUserInput[] | PostCreateWithoutUserInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
}

export interface PostCreateWithoutUserInput {
  userBook: UserBookCreateOneWithoutPostsInput;
  likes?: Int;
  backgroundTheme?: String;
  content?: String;
}

export interface PostUpdateInput {
  user?: UserUpdateOneRequiredWithoutPostsInput;
  userBook?: UserBookUpdateOneRequiredWithoutPostsInput;
  likes?: Int;
  backgroundTheme?: String;
  content?: String;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput;
  update?: UserUpdateWithoutPostsDataInput;
  upsert?: UserUpsertWithoutPostsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutPostsDataInput {
  username?: String;
  email?: String;
  password?: String;
  books?: UserBookUpdateManyWithoutUserInput;
}

export interface UserBookUpdateManyWithoutUserInput {
  create?: UserBookCreateWithoutUserInput[] | UserBookCreateWithoutUserInput;
  delete?: UserBookWhereUniqueInput[] | UserBookWhereUniqueInput;
  connect?: UserBookWhereUniqueInput[] | UserBookWhereUniqueInput;
  set?: UserBookWhereUniqueInput[] | UserBookWhereUniqueInput;
  disconnect?: UserBookWhereUniqueInput[] | UserBookWhereUniqueInput;
  update?:
    | UserBookUpdateWithWhereUniqueWithoutUserInput[]
    | UserBookUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | UserBookUpsertWithWhereUniqueWithoutUserInput[]
    | UserBookUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: UserBookScalarWhereInput[] | UserBookScalarWhereInput;
  updateMany?:
    | UserBookUpdateManyWithWhereNestedInput[]
    | UserBookUpdateManyWithWhereNestedInput;
}

export interface UserBookUpdateWithWhereUniqueWithoutUserInput {
  where: UserBookWhereUniqueInput;
  data: UserBookUpdateWithoutUserDataInput;
}

export interface UserBookUpdateWithoutUserDataInput {
  book?: BookUpdateOneRequiredInput;
  posts?: PostUpdateManyWithoutUserBookInput;
  rating?: Float;
  status?: FeedStatus;
  readAt?: DateTimeInput;
}

export interface BookUpdateOneRequiredInput {
  create?: BookCreateInput;
  update?: BookUpdateDataInput;
  upsert?: BookUpsertNestedInput;
  connect?: BookWhereUniqueInput;
}

export interface BookUpdateDataInput {
  title?: String;
  isbn?: String;
  author?: String;
  cover?: String;
  publisher?: String;
  description?: String;
}

export interface BookUpsertNestedInput {
  update: BookUpdateDataInput;
  create: BookCreateInput;
}

export interface PostUpdateManyWithoutUserBookInput {
  create?: PostCreateWithoutUserBookInput[] | PostCreateWithoutUserBookInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutUserBookInput[]
    | PostUpdateWithWhereUniqueWithoutUserBookInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutUserBookInput[]
    | PostUpsertWithWhereUniqueWithoutUserBookInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutUserBookInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserBookDataInput;
}

export interface PostUpdateWithoutUserBookDataInput {
  user?: UserUpdateOneRequiredWithoutPostsInput;
  likes?: Int;
  backgroundTheme?: String;
  content?: String;
}

export interface PostUpsertWithWhereUniqueWithoutUserBookInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserBookDataInput;
  create: PostCreateWithoutUserBookInput;
}

export interface PostScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  likes?: Int;
  likes_not?: Int;
  likes_in?: Int[] | Int;
  likes_not_in?: Int[] | Int;
  likes_lt?: Int;
  likes_lte?: Int;
  likes_gt?: Int;
  likes_gte?: Int;
  backgroundTheme?: String;
  backgroundTheme_not?: String;
  backgroundTheme_in?: String[] | String;
  backgroundTheme_not_in?: String[] | String;
  backgroundTheme_lt?: String;
  backgroundTheme_lte?: String;
  backgroundTheme_gt?: String;
  backgroundTheme_gte?: String;
  backgroundTheme_contains?: String;
  backgroundTheme_not_contains?: String;
  backgroundTheme_starts_with?: String;
  backgroundTheme_not_starts_with?: String;
  backgroundTheme_ends_with?: String;
  backgroundTheme_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PostScalarWhereInput[] | PostScalarWhereInput;
  OR?: PostScalarWhereInput[] | PostScalarWhereInput;
  NOT?: PostScalarWhereInput[] | PostScalarWhereInput;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  likes?: Int;
  backgroundTheme?: String;
  content?: String;
}

export interface UserBookUpsertWithWhereUniqueWithoutUserInput {
  where: UserBookWhereUniqueInput;
  update: UserBookUpdateWithoutUserDataInput;
  create: UserBookCreateWithoutUserInput;
}

export interface UserBookScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rating?: Float;
  rating_not?: Float;
  rating_in?: Float[] | Float;
  rating_not_in?: Float[] | Float;
  rating_lt?: Float;
  rating_lte?: Float;
  rating_gt?: Float;
  rating_gte?: Float;
  status?: FeedStatus;
  status_not?: FeedStatus;
  status_in?: FeedStatus[] | FeedStatus;
  status_not_in?: FeedStatus[] | FeedStatus;
  readAt?: DateTimeInput;
  readAt_not?: DateTimeInput;
  readAt_in?: DateTimeInput[] | DateTimeInput;
  readAt_not_in?: DateTimeInput[] | DateTimeInput;
  readAt_lt?: DateTimeInput;
  readAt_lte?: DateTimeInput;
  readAt_gt?: DateTimeInput;
  readAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserBookScalarWhereInput[] | UserBookScalarWhereInput;
  OR?: UserBookScalarWhereInput[] | UserBookScalarWhereInput;
  NOT?: UserBookScalarWhereInput[] | UserBookScalarWhereInput;
}

export interface UserBookUpdateManyWithWhereNestedInput {
  where: UserBookScalarWhereInput;
  data: UserBookUpdateManyDataInput;
}

export interface UserBookUpdateManyDataInput {
  rating?: Float;
  status?: FeedStatus;
  readAt?: DateTimeInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface UserBookUpdateOneRequiredWithoutPostsInput {
  create?: UserBookCreateWithoutPostsInput;
  update?: UserBookUpdateWithoutPostsDataInput;
  upsert?: UserBookUpsertWithoutPostsInput;
  connect?: UserBookWhereUniqueInput;
}

export interface UserBookUpdateWithoutPostsDataInput {
  user?: UserUpdateOneRequiredWithoutBooksInput;
  book?: BookUpdateOneRequiredInput;
  rating?: Float;
  status?: FeedStatus;
  readAt?: DateTimeInput;
}

export interface UserUpdateOneRequiredWithoutBooksInput {
  create?: UserCreateWithoutBooksInput;
  update?: UserUpdateWithoutBooksDataInput;
  upsert?: UserUpsertWithoutBooksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutBooksDataInput {
  username?: String;
  email?: String;
  password?: String;
  posts?: PostUpdateManyWithoutUserInput;
}

export interface PostUpdateManyWithoutUserInput {
  create?: PostCreateWithoutUserInput[] | PostCreateWithoutUserInput;
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  set?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput;
  update?:
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: PostScalarWhereInput[] | PostScalarWhereInput;
  updateMany?:
    | PostUpdateManyWithWhereNestedInput[]
    | PostUpdateManyWithWhereNestedInput;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface PostUpdateWithoutUserDataInput {
  userBook?: UserBookUpdateOneRequiredWithoutPostsInput;
  likes?: Int;
  backgroundTheme?: String;
  content?: String;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface UserUpsertWithoutBooksInput {
  update: UserUpdateWithoutBooksDataInput;
  create: UserCreateWithoutBooksInput;
}

export interface UserBookUpsertWithoutPostsInput {
  update: UserBookUpdateWithoutPostsDataInput;
  create: UserBookCreateWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  likes?: Int;
  backgroundTheme?: String;
  content?: String;
}

export interface UserCreateInput {
  username: String;
  email: String;
  password?: String;
  books?: UserBookCreateManyWithoutUserInput;
  posts?: PostCreateManyWithoutUserInput;
}

export interface UserUpdateInput {
  username?: String;
  email?: String;
  password?: String;
  books?: UserBookUpdateManyWithoutUserInput;
  posts?: PostUpdateManyWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  email?: String;
  password?: String;
}

export interface UserBookCreateInput {
  user: UserCreateOneWithoutBooksInput;
  book: BookCreateOneInput;
  posts?: PostCreateManyWithoutUserBookInput;
  rating?: Float;
  status?: FeedStatus;
  readAt: DateTimeInput;
}

export interface UserBookUpdateInput {
  user?: UserUpdateOneRequiredWithoutBooksInput;
  book?: BookUpdateOneRequiredInput;
  posts?: PostUpdateManyWithoutUserBookInput;
  rating?: Float;
  status?: FeedStatus;
  readAt?: DateTimeInput;
}

export interface UserBookUpdateManyMutationInput {
  rating?: Float;
  status?: FeedStatus;
  readAt?: DateTimeInput;
}

export interface BookSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BookWhereInput;
  AND?: BookSubscriptionWhereInput[] | BookSubscriptionWhereInput;
  OR?: BookSubscriptionWhereInput[] | BookSubscriptionWhereInput;
  NOT?: BookSubscriptionWhereInput[] | BookSubscriptionWhereInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserBookSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserBookWhereInput;
  AND?: UserBookSubscriptionWhereInput[] | UserBookSubscriptionWhereInput;
  OR?: UserBookSubscriptionWhereInput[] | UserBookSubscriptionWhereInput;
  NOT?: UserBookSubscriptionWhereInput[] | UserBookSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Book {
  id: ID_Output;
  title: String;
  isbn: String;
  author?: String;
  cover?: String;
  publisher?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BookPromise extends Promise<Book>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  isbn: () => Promise<String>;
  author: () => Promise<String>;
  cover: () => Promise<String>;
  publisher: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookSubscription
  extends Promise<AsyncIterator<Book>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  isbn: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
  publisher: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BookConnection {
  pageInfo: PageInfo;
  edges: BookEdge[];
}

export interface BookConnectionPromise
  extends Promise<BookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookEdge>>() => T;
  aggregate: <T = AggregateBookPromise>() => T;
}

export interface BookConnectionSubscription
  extends Promise<AsyncIterator<BookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BookEdge {
  node: Book;
  cursor: String;
}

export interface BookEdgePromise extends Promise<BookEdge>, Fragmentable {
  node: <T = BookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookEdgeSubscription
  extends Promise<AsyncIterator<BookEdge>>,
    Fragmentable {
  node: <T = BookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBook {
  count: Int;
}

export interface AggregateBookPromise
  extends Promise<AggregateBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookSubscription
  extends Promise<AsyncIterator<AggregateBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  likes: Int;
  backgroundTheme?: String;
  content?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userBook: <T = UserBookPromise>() => T;
  likes: () => Promise<Int>;
  backgroundTheme: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  userBook: <T = UserBookSubscription>() => T;
  likes: () => Promise<AsyncIterator<Int>>;
  backgroundTheme: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  books: <T = FragmentableArray<UserBook>>(
    args?: {
      where?: UserBookWhereInput;
      orderBy?: UserBookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  books: <T = Promise<AsyncIterator<UserBookSubscription>>>(
    args?: {
      where?: UserBookWhereInput;
      orderBy?: UserBookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserBook {
  id: ID_Output;
  rating?: Float;
  status?: FeedStatus;
  readAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserBookPromise extends Promise<UserBook>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  book: <T = BookPromise>() => T;
  posts: <T = FragmentableArray<Post>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rating: () => Promise<Float>;
  status: () => Promise<FeedStatus>;
  readAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserBookSubscription
  extends Promise<AsyncIterator<UserBook>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  book: <T = BookSubscription>() => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rating: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<FeedStatus>>;
  readAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserBookConnection {
  pageInfo: PageInfo;
  edges: UserBookEdge[];
}

export interface UserBookConnectionPromise
  extends Promise<UserBookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserBookEdge>>() => T;
  aggregate: <T = AggregateUserBookPromise>() => T;
}

export interface UserBookConnectionSubscription
  extends Promise<AsyncIterator<UserBookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserBookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserBookSubscription>() => T;
}

export interface UserBookEdge {
  node: UserBook;
  cursor: String;
}

export interface UserBookEdgePromise
  extends Promise<UserBookEdge>,
    Fragmentable {
  node: <T = UserBookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserBookEdgeSubscription
  extends Promise<AsyncIterator<UserBookEdge>>,
    Fragmentable {
  node: <T = UserBookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserBook {
  count: Int;
}

export interface AggregateUserBookPromise
  extends Promise<AggregateUserBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserBookSubscription
  extends Promise<AsyncIterator<AggregateUserBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BookSubscriptionPayload {
  mutation: MutationType;
  node: Book;
  updatedFields: String[];
  previousValues: BookPreviousValues;
}

export interface BookSubscriptionPayloadPromise
  extends Promise<BookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPreviousValuesPromise>() => T;
}

export interface BookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPreviousValuesSubscription>() => T;
}

export interface BookPreviousValues {
  id: ID_Output;
  title: String;
  isbn: String;
  author?: String;
  cover?: String;
  publisher?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BookPreviousValuesPromise
  extends Promise<BookPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  isbn: () => Promise<String>;
  author: () => Promise<String>;
  cover: () => Promise<String>;
  publisher: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  isbn: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
  publisher: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  likes: Int;
  backgroundTheme?: String;
  content?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  likes: () => Promise<Int>;
  backgroundTheme: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  likes: () => Promise<AsyncIterator<Int>>;
  backgroundTheme: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserBookSubscriptionPayload {
  mutation: MutationType;
  node: UserBook;
  updatedFields: String[];
  previousValues: UserBookPreviousValues;
}

export interface UserBookSubscriptionPayloadPromise
  extends Promise<UserBookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserBookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserBookPreviousValuesPromise>() => T;
}

export interface UserBookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserBookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserBookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserBookPreviousValuesSubscription>() => T;
}

export interface UserBookPreviousValues {
  id: ID_Output;
  rating?: Float;
  status?: FeedStatus;
  readAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserBookPreviousValuesPromise
  extends Promise<UserBookPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Float>;
  status: () => Promise<FeedStatus>;
  readAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserBookPreviousValuesSubscription
  extends Promise<AsyncIterator<UserBookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Float>>;
  status: () => Promise<AsyncIterator<FeedStatus>>;
  readAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Book",
    embedded: false
  },
  {
    name: "UserBook",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "FeedStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://127.0.0.1:4466`
});
export const prisma = new Prisma();
