// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  book: (where?: BookWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  social: (where?: SocialWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userBook: (where?: UserBookWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  book: (where: BookWhereUniqueInput) => BookNullablePromise;
  books: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Book>;
  booksConnection: (args?: {
    where?: BookWhereInput;
    orderBy?: BookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BookConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  social: (where: SocialWhereUniqueInput) => SocialNullablePromise;
  socials: (args?: {
    where?: SocialWhereInput;
    orderBy?: SocialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Social>;
  socialsConnection: (args?: {
    where?: SocialWhereInput;
    orderBy?: SocialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SocialConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userBook: (where: UserBookWhereUniqueInput) => UserBookNullablePromise;
  userBooks: (args?: {
    where?: UserBookWhereInput;
    orderBy?: UserBookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserBook>;
  userBooksConnection: (args?: {
    where?: UserBookWhereInput;
    orderBy?: UserBookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserBookConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBook: (data: BookCreateInput) => BookPromise;
  updateBook: (args: {
    data: BookUpdateInput;
    where: BookWhereUniqueInput;
  }) => BookPromise;
  updateManyBooks: (args: {
    data: BookUpdateManyMutationInput;
    where?: BookWhereInput;
  }) => BatchPayloadPromise;
  upsertBook: (args: {
    where: BookWhereUniqueInput;
    create: BookCreateInput;
    update: BookUpdateInput;
  }) => BookPromise;
  deleteBook: (where: BookWhereUniqueInput) => BookPromise;
  deleteManyBooks: (where?: BookWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createSocial: (data: SocialCreateInput) => SocialPromise;
  updateSocial: (args: {
    data: SocialUpdateInput;
    where: SocialWhereUniqueInput;
  }) => SocialPromise;
  updateManySocials: (args: {
    data: SocialUpdateManyMutationInput;
    where?: SocialWhereInput;
  }) => BatchPayloadPromise;
  upsertSocial: (args: {
    where: SocialWhereUniqueInput;
    create: SocialCreateInput;
    update: SocialUpdateInput;
  }) => SocialPromise;
  deleteSocial: (where: SocialWhereUniqueInput) => SocialPromise;
  deleteManySocials: (where?: SocialWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserBook: (data: UserBookCreateInput) => UserBookPromise;
  updateUserBook: (args: {
    data: UserBookUpdateInput;
    where: UserBookWhereUniqueInput;
  }) => UserBookPromise;
  updateManyUserBooks: (args: {
    data: UserBookUpdateManyMutationInput;
    where?: UserBookWhereInput;
  }) => BatchPayloadPromise;
  upsertUserBook: (args: {
    where: UserBookWhereUniqueInput;
    create: UserBookCreateInput;
    update: UserBookUpdateInput;
  }) => UserBookPromise;
  deleteUserBook: (where: UserBookWhereUniqueInput) => UserBookPromise;
  deleteManyUserBooks: (where?: UserBookWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  book: (
    where?: BookSubscriptionWhereInput
  ) => BookSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  social: (
    where?: SocialSubscriptionWhereInput
  ) => SocialSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userBook: (
    where?: UserBookSubscriptionWhereInput
  ) => UserBookSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type BookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "isbn_ASC"
  | "isbn_DESC"
  | "author_ASC"
  | "author_DESC"
  | "cover_ASC"
  | "cover_DESC"
  | "publisher_ASC"
  | "publisher_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FeedStatus = "CURRENT_READING" | "READ" | "WANT_TO_READ";

export type UserBookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "readAt_ASC"
  | "readAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "likes_ASC"
  | "likes_DESC"
  | "backgroundTheme_ASC"
  | "backgroundTheme_DESC"
  | "content_ASC"
  | "content_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "loginedAt_ASC"
  | "loginedAt_DESC"
  | "photo_ASC"
  | "photo_DESC"
  | "bio_ASC"
  | "bio_DESC";

export type SocialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "externalId_ASC"
  | "externalId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BookWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  isbn?: Maybe<String>;
}>;

export interface BookWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  isbn?: Maybe<String>;
  isbn_not?: Maybe<String>;
  isbn_in?: Maybe<String[] | String>;
  isbn_not_in?: Maybe<String[] | String>;
  isbn_lt?: Maybe<String>;
  isbn_lte?: Maybe<String>;
  isbn_gt?: Maybe<String>;
  isbn_gte?: Maybe<String>;
  isbn_contains?: Maybe<String>;
  isbn_not_contains?: Maybe<String>;
  isbn_starts_with?: Maybe<String>;
  isbn_not_starts_with?: Maybe<String>;
  isbn_ends_with?: Maybe<String>;
  isbn_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  cover?: Maybe<String>;
  cover_not?: Maybe<String>;
  cover_in?: Maybe<String[] | String>;
  cover_not_in?: Maybe<String[] | String>;
  cover_lt?: Maybe<String>;
  cover_lte?: Maybe<String>;
  cover_gt?: Maybe<String>;
  cover_gte?: Maybe<String>;
  cover_contains?: Maybe<String>;
  cover_not_contains?: Maybe<String>;
  cover_starts_with?: Maybe<String>;
  cover_not_starts_with?: Maybe<String>;
  cover_ends_with?: Maybe<String>;
  cover_not_ends_with?: Maybe<String>;
  publisher?: Maybe<String>;
  publisher_not?: Maybe<String>;
  publisher_in?: Maybe<String[] | String>;
  publisher_not_in?: Maybe<String[] | String>;
  publisher_lt?: Maybe<String>;
  publisher_lte?: Maybe<String>;
  publisher_gt?: Maybe<String>;
  publisher_gte?: Maybe<String>;
  publisher_contains?: Maybe<String>;
  publisher_not_contains?: Maybe<String>;
  publisher_starts_with?: Maybe<String>;
  publisher_not_starts_with?: Maybe<String>;
  publisher_ends_with?: Maybe<String>;
  publisher_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BookWhereInput[] | BookWhereInput>;
  OR?: Maybe<BookWhereInput[] | BookWhereInput>;
  NOT?: Maybe<BookWhereInput[] | BookWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserBookWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  book?: Maybe<BookWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  rating?: Maybe<Float>;
  rating_not?: Maybe<Float>;
  rating_in?: Maybe<Float[] | Float>;
  rating_not_in?: Maybe<Float[] | Float>;
  rating_lt?: Maybe<Float>;
  rating_lte?: Maybe<Float>;
  rating_gt?: Maybe<Float>;
  rating_gte?: Maybe<Float>;
  readAt?: Maybe<DateTimeInput>;
  readAt_not?: Maybe<DateTimeInput>;
  readAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readAt_lt?: Maybe<DateTimeInput>;
  readAt_lte?: Maybe<DateTimeInput>;
  readAt_gt?: Maybe<DateTimeInput>;
  readAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserBookWhereInput[] | UserBookWhereInput>;
  OR?: Maybe<UserBookWhereInput[] | UserBookWhereInput>;
  NOT?: Maybe<UserBookWhereInput[] | UserBookWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  loginedAt?: Maybe<DateTimeInput>;
  loginedAt_not?: Maybe<DateTimeInput>;
  loginedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loginedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loginedAt_lt?: Maybe<DateTimeInput>;
  loginedAt_lte?: Maybe<DateTimeInput>;
  loginedAt_gt?: Maybe<DateTimeInput>;
  loginedAt_gte?: Maybe<DateTimeInput>;
  books_every?: Maybe<UserBookWhereInput>;
  books_some?: Maybe<UserBookWhereInput>;
  books_none?: Maybe<UserBookWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  following_every?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  following_none?: Maybe<UserWhereInput>;
  followed_every?: Maybe<UserWhereInput>;
  followed_some?: Maybe<UserWhereInput>;
  followed_none?: Maybe<UserWhereInput>;
  photo?: Maybe<String>;
  photo_not?: Maybe<String>;
  photo_in?: Maybe<String[] | String>;
  photo_not_in?: Maybe<String[] | String>;
  photo_lt?: Maybe<String>;
  photo_lte?: Maybe<String>;
  photo_gt?: Maybe<String>;
  photo_gte?: Maybe<String>;
  photo_contains?: Maybe<String>;
  photo_not_contains?: Maybe<String>;
  photo_starts_with?: Maybe<String>;
  photo_not_starts_with?: Maybe<String>;
  photo_ends_with?: Maybe<String>;
  photo_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  social?: Maybe<SocialWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  userBook?: Maybe<UserBookWhereInput>;
  likes?: Maybe<Int>;
  likes_not?: Maybe<Int>;
  likes_in?: Maybe<Int[] | Int>;
  likes_not_in?: Maybe<Int[] | Int>;
  likes_lt?: Maybe<Int>;
  likes_lte?: Maybe<Int>;
  likes_gt?: Maybe<Int>;
  likes_gte?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  backgroundTheme_not?: Maybe<String>;
  backgroundTheme_in?: Maybe<String[] | String>;
  backgroundTheme_not_in?: Maybe<String[] | String>;
  backgroundTheme_lt?: Maybe<String>;
  backgroundTheme_lte?: Maybe<String>;
  backgroundTheme_gt?: Maybe<String>;
  backgroundTheme_gte?: Maybe<String>;
  backgroundTheme_contains?: Maybe<String>;
  backgroundTheme_not_contains?: Maybe<String>;
  backgroundTheme_starts_with?: Maybe<String>;
  backgroundTheme_not_starts_with?: Maybe<String>;
  backgroundTheme_ends_with?: Maybe<String>;
  backgroundTheme_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  status?: Maybe<FeedStatus>;
  status_not?: Maybe<FeedStatus>;
  status_in?: Maybe<FeedStatus[] | FeedStatus>;
  status_not_in?: Maybe<FeedStatus[] | FeedStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface SocialWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  externalId?: Maybe<String>;
  externalId_not?: Maybe<String>;
  externalId_in?: Maybe<String[] | String>;
  externalId_not_in?: Maybe<String[] | String>;
  externalId_lt?: Maybe<String>;
  externalId_lte?: Maybe<String>;
  externalId_gt?: Maybe<String>;
  externalId_gte?: Maybe<String>;
  externalId_contains?: Maybe<String>;
  externalId_not_contains?: Maybe<String>;
  externalId_starts_with?: Maybe<String>;
  externalId_not_starts_with?: Maybe<String>;
  externalId_ends_with?: Maybe<String>;
  externalId_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SocialWhereInput[] | SocialWhereInput>;
  OR?: Maybe<SocialWhereInput[] | SocialWhereInput>;
  NOT?: Maybe<SocialWhereInput[] | SocialWhereInput>;
}

export type SocialWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  nickname?: Maybe<String>;
}>;

export type UserBookWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface BookCreateInput {
  title: String;
  isbn: String;
  author?: Maybe<String>;
  cover?: Maybe<String>;
  publisher?: Maybe<String>;
  description?: Maybe<String>;
}

export interface BookUpdateInput {
  title?: Maybe<String>;
  isbn?: Maybe<String>;
  author?: Maybe<String>;
  cover?: Maybe<String>;
  publisher?: Maybe<String>;
  description?: Maybe<String>;
}

export interface BookUpdateManyMutationInput {
  title?: Maybe<String>;
  isbn?: Maybe<String>;
  author?: Maybe<String>;
  cover?: Maybe<String>;
  publisher?: Maybe<String>;
  description?: Maybe<String>;
}

export interface PostCreateInput {
  user: UserCreateOneWithoutPostsInput;
  userBook: UserBookCreateOneWithoutPostsInput;
  likes?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<FeedStatus>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  email: String;
  nickname: String;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followed?: Maybe<UserCreateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialCreateOneWithoutUserInput>;
}

export interface UserBookCreateManyWithoutUserInput {
  create?: Maybe<
    UserBookCreateWithoutUserInput[] | UserBookCreateWithoutUserInput
  >;
  connect?: Maybe<UserBookWhereUniqueInput[] | UserBookWhereUniqueInput>;
}

export interface UserBookCreateWithoutUserInput {
  book: BookCreateOneInput;
  posts?: Maybe<PostCreateManyWithoutUserBookInput>;
  rating?: Maybe<Float>;
  readAt: DateTimeInput;
}

export interface BookCreateOneInput {
  create?: Maybe<BookCreateInput>;
  connect?: Maybe<BookWhereUniqueInput>;
}

export interface PostCreateManyWithoutUserBookInput {
  create?: Maybe<
    PostCreateWithoutUserBookInput[] | PostCreateWithoutUserBookInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutUserBookInput {
  user: UserCreateOneWithoutPostsInput;
  likes?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<FeedStatus>;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowingInput {
  email: String;
  nickname: String;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  followed?: Maybe<UserCreateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialCreateOneWithoutUserInput>;
}

export interface PostCreateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutUserInput {
  userBook: UserBookCreateOneWithoutPostsInput;
  likes?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<FeedStatus>;
}

export interface UserBookCreateOneWithoutPostsInput {
  create?: Maybe<UserBookCreateWithoutPostsInput>;
  connect?: Maybe<UserBookWhereUniqueInput>;
}

export interface UserBookCreateWithoutPostsInput {
  user: UserCreateOneWithoutBooksInput;
  book: BookCreateOneInput;
  rating?: Maybe<Float>;
  readAt: DateTimeInput;
}

export interface UserCreateOneWithoutBooksInput {
  create?: Maybe<UserCreateWithoutBooksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutBooksInput {
  email: String;
  nickname: String;
  loginedAt?: Maybe<DateTimeInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followed?: Maybe<UserCreateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialCreateOneWithoutUserInput>;
}

export interface UserCreateManyWithoutFollowedInput {
  create?: Maybe<
    UserCreateWithoutFollowedInput[] | UserCreateWithoutFollowedInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowedInput {
  email: String;
  nickname: String;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialCreateOneWithoutUserInput>;
}

export interface SocialCreateOneWithoutUserInput {
  create?: Maybe<SocialCreateWithoutUserInput>;
  connect?: Maybe<SocialWhereUniqueInput>;
}

export interface SocialCreateWithoutUserInput {
  type: String;
  externalId: String;
}

export interface PostUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  userBook?: Maybe<UserBookUpdateOneRequiredWithoutPostsInput>;
  likes?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<FeedStatus>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: Maybe<String>;
  nickname?: Maybe<String>;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followed?: Maybe<UserUpdateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialUpdateOneWithoutUserInput>;
}

export interface UserBookUpdateManyWithoutUserInput {
  create?: Maybe<
    UserBookCreateWithoutUserInput[] | UserBookCreateWithoutUserInput
  >;
  delete?: Maybe<UserBookWhereUniqueInput[] | UserBookWhereUniqueInput>;
  connect?: Maybe<UserBookWhereUniqueInput[] | UserBookWhereUniqueInput>;
  set?: Maybe<UserBookWhereUniqueInput[] | UserBookWhereUniqueInput>;
  disconnect?: Maybe<UserBookWhereUniqueInput[] | UserBookWhereUniqueInput>;
  update?: Maybe<
    | UserBookUpdateWithWhereUniqueWithoutUserInput[]
    | UserBookUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UserBookUpsertWithWhereUniqueWithoutUserInput[]
    | UserBookUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<UserBookScalarWhereInput[] | UserBookScalarWhereInput>;
  updateMany?: Maybe<
    | UserBookUpdateManyWithWhereNestedInput[]
    | UserBookUpdateManyWithWhereNestedInput
  >;
}

export interface UserBookUpdateWithWhereUniqueWithoutUserInput {
  where: UserBookWhereUniqueInput;
  data: UserBookUpdateWithoutUserDataInput;
}

export interface UserBookUpdateWithoutUserDataInput {
  book?: Maybe<BookUpdateOneRequiredInput>;
  posts?: Maybe<PostUpdateManyWithoutUserBookInput>;
  rating?: Maybe<Float>;
  readAt?: Maybe<DateTimeInput>;
}

export interface BookUpdateOneRequiredInput {
  create?: Maybe<BookCreateInput>;
  update?: Maybe<BookUpdateDataInput>;
  upsert?: Maybe<BookUpsertNestedInput>;
  connect?: Maybe<BookWhereUniqueInput>;
}

export interface BookUpdateDataInput {
  title?: Maybe<String>;
  isbn?: Maybe<String>;
  author?: Maybe<String>;
  cover?: Maybe<String>;
  publisher?: Maybe<String>;
  description?: Maybe<String>;
}

export interface BookUpsertNestedInput {
  update: BookUpdateDataInput;
  create: BookCreateInput;
}

export interface PostUpdateManyWithoutUserBookInput {
  create?: Maybe<
    PostCreateWithoutUserBookInput[] | PostCreateWithoutUserBookInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserBookInput[]
    | PostUpdateWithWhereUniqueWithoutUserBookInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserBookInput[]
    | PostUpsertWithWhereUniqueWithoutUserBookInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutUserBookInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserBookDataInput;
}

export interface PostUpdateWithoutUserBookDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  likes?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<FeedStatus>;
}

export interface PostUpsertWithWhereUniqueWithoutUserBookInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserBookDataInput;
  create: PostCreateWithoutUserBookInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  likes?: Maybe<Int>;
  likes_not?: Maybe<Int>;
  likes_in?: Maybe<Int[] | Int>;
  likes_not_in?: Maybe<Int[] | Int>;
  likes_lt?: Maybe<Int>;
  likes_lte?: Maybe<Int>;
  likes_gt?: Maybe<Int>;
  likes_gte?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  backgroundTheme_not?: Maybe<String>;
  backgroundTheme_in?: Maybe<String[] | String>;
  backgroundTheme_not_in?: Maybe<String[] | String>;
  backgroundTheme_lt?: Maybe<String>;
  backgroundTheme_lte?: Maybe<String>;
  backgroundTheme_gt?: Maybe<String>;
  backgroundTheme_gte?: Maybe<String>;
  backgroundTheme_contains?: Maybe<String>;
  backgroundTheme_not_contains?: Maybe<String>;
  backgroundTheme_starts_with?: Maybe<String>;
  backgroundTheme_not_starts_with?: Maybe<String>;
  backgroundTheme_ends_with?: Maybe<String>;
  backgroundTheme_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  status?: Maybe<FeedStatus>;
  status_not?: Maybe<FeedStatus>;
  status_in?: Maybe<FeedStatus[] | FeedStatus>;
  status_not_in?: Maybe<FeedStatus[] | FeedStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  likes?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<FeedStatus>;
}

export interface UserBookUpsertWithWhereUniqueWithoutUserInput {
  where: UserBookWhereUniqueInput;
  update: UserBookUpdateWithoutUserDataInput;
  create: UserBookCreateWithoutUserInput;
}

export interface UserBookScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  rating?: Maybe<Float>;
  rating_not?: Maybe<Float>;
  rating_in?: Maybe<Float[] | Float>;
  rating_not_in?: Maybe<Float[] | Float>;
  rating_lt?: Maybe<Float>;
  rating_lte?: Maybe<Float>;
  rating_gt?: Maybe<Float>;
  rating_gte?: Maybe<Float>;
  readAt?: Maybe<DateTimeInput>;
  readAt_not?: Maybe<DateTimeInput>;
  readAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  readAt_lt?: Maybe<DateTimeInput>;
  readAt_lte?: Maybe<DateTimeInput>;
  readAt_gt?: Maybe<DateTimeInput>;
  readAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserBookScalarWhereInput[] | UserBookScalarWhereInput>;
  OR?: Maybe<UserBookScalarWhereInput[] | UserBookScalarWhereInput>;
  NOT?: Maybe<UserBookScalarWhereInput[] | UserBookScalarWhereInput>;
}

export interface UserBookUpdateManyWithWhereNestedInput {
  where: UserBookScalarWhereInput;
  data: UserBookUpdateManyDataInput;
}

export interface UserBookUpdateManyDataInput {
  rating?: Maybe<Float>;
  readAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserUpdateWithoutFollowingDataInput {
  email?: Maybe<String>;
  nickname?: Maybe<String>;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  followed?: Maybe<UserUpdateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialUpdateOneWithoutUserInput>;
}

export interface PostUpdateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface PostUpdateWithoutUserDataInput {
  userBook?: Maybe<UserBookUpdateOneRequiredWithoutPostsInput>;
  likes?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<FeedStatus>;
}

export interface UserBookUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserBookCreateWithoutPostsInput>;
  update?: Maybe<UserBookUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserBookUpsertWithoutPostsInput>;
  connect?: Maybe<UserBookWhereUniqueInput>;
}

export interface UserBookUpdateWithoutPostsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBooksInput>;
  book?: Maybe<BookUpdateOneRequiredInput>;
  rating?: Maybe<Float>;
  readAt?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredWithoutBooksInput {
  create?: Maybe<UserCreateWithoutBooksInput>;
  update?: Maybe<UserUpdateWithoutBooksDataInput>;
  upsert?: Maybe<UserUpsertWithoutBooksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutBooksDataInput {
  email?: Maybe<String>;
  nickname?: Maybe<String>;
  loginedAt?: Maybe<DateTimeInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followed?: Maybe<UserUpdateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialUpdateOneWithoutUserInput>;
}

export interface UserUpdateManyWithoutFollowedInput {
  create?: Maybe<
    UserCreateWithoutFollowedInput[] | UserCreateWithoutFollowedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowedInput[]
    | UserUpdateWithWhereUniqueWithoutFollowedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowedInput[]
    | UserUpsertWithWhereUniqueWithoutFollowedInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowedDataInput;
}

export interface UserUpdateWithoutFollowedDataInput {
  email?: Maybe<String>;
  nickname?: Maybe<String>;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialUpdateOneWithoutUserInput>;
}

export interface SocialUpdateOneWithoutUserInput {
  create?: Maybe<SocialCreateWithoutUserInput>;
  update?: Maybe<SocialUpdateWithoutUserDataInput>;
  upsert?: Maybe<SocialUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SocialWhereUniqueInput>;
}

export interface SocialUpdateWithoutUserDataInput {
  type?: Maybe<String>;
  externalId?: Maybe<String>;
}

export interface SocialUpsertWithoutUserInput {
  update: SocialUpdateWithoutUserDataInput;
  create: SocialCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowedDataInput;
  create: UserCreateWithoutFollowedInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  nickname?: Maybe<String>;
  nickname_not?: Maybe<String>;
  nickname_in?: Maybe<String[] | String>;
  nickname_not_in?: Maybe<String[] | String>;
  nickname_lt?: Maybe<String>;
  nickname_lte?: Maybe<String>;
  nickname_gt?: Maybe<String>;
  nickname_gte?: Maybe<String>;
  nickname_contains?: Maybe<String>;
  nickname_not_contains?: Maybe<String>;
  nickname_starts_with?: Maybe<String>;
  nickname_not_starts_with?: Maybe<String>;
  nickname_ends_with?: Maybe<String>;
  nickname_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  loginedAt?: Maybe<DateTimeInput>;
  loginedAt_not?: Maybe<DateTimeInput>;
  loginedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loginedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  loginedAt_lt?: Maybe<DateTimeInput>;
  loginedAt_lte?: Maybe<DateTimeInput>;
  loginedAt_gt?: Maybe<DateTimeInput>;
  loginedAt_gte?: Maybe<DateTimeInput>;
  photo?: Maybe<String>;
  photo_not?: Maybe<String>;
  photo_in?: Maybe<String[] | String>;
  photo_not_in?: Maybe<String[] | String>;
  photo_lt?: Maybe<String>;
  photo_lte?: Maybe<String>;
  photo_gt?: Maybe<String>;
  photo_gte?: Maybe<String>;
  photo_contains?: Maybe<String>;
  photo_not_contains?: Maybe<String>;
  photo_starts_with?: Maybe<String>;
  photo_not_starts_with?: Maybe<String>;
  photo_ends_with?: Maybe<String>;
  photo_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  nickname?: Maybe<String>;
  loginedAt?: Maybe<DateTimeInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
}

export interface UserUpsertWithoutBooksInput {
  update: UserUpdateWithoutBooksDataInput;
  create: UserCreateWithoutBooksInput;
}

export interface UserBookUpsertWithoutPostsInput {
  update: UserBookUpdateWithoutPostsDataInput;
  create: UserBookCreateWithoutPostsInput;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  likes?: Maybe<Int>;
  backgroundTheme?: Maybe<String>;
  content?: Maybe<String>;
  status?: Maybe<FeedStatus>;
}

export interface SocialCreateInput {
  type: String;
  user: UserCreateOneWithoutSocialInput;
  externalId: String;
}

export interface UserCreateOneWithoutSocialInput {
  create?: Maybe<UserCreateWithoutSocialInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSocialInput {
  email: String;
  nickname: String;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followed?: Maybe<UserCreateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
}

export interface SocialUpdateInput {
  type?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutSocialInput>;
  externalId?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutSocialInput {
  create?: Maybe<UserCreateWithoutSocialInput>;
  update?: Maybe<UserUpdateWithoutSocialDataInput>;
  upsert?: Maybe<UserUpsertWithoutSocialInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSocialDataInput {
  email?: Maybe<String>;
  nickname?: Maybe<String>;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followed?: Maybe<UserUpdateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
}

export interface UserUpsertWithoutSocialInput {
  update: UserUpdateWithoutSocialDataInput;
  create: UserCreateWithoutSocialInput;
}

export interface SocialUpdateManyMutationInput {
  type?: Maybe<String>;
  externalId?: Maybe<String>;
}

export interface UserCreateInput {
  email: String;
  nickname: String;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookCreateManyWithoutUserInput>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowingInput>;
  followed?: Maybe<UserCreateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialCreateOneWithoutUserInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  nickname?: Maybe<String>;
  loginedAt?: Maybe<DateTimeInput>;
  books?: Maybe<UserBookUpdateManyWithoutUserInput>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowingInput>;
  followed?: Maybe<UserUpdateManyWithoutFollowedInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
  social?: Maybe<SocialUpdateOneWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  nickname?: Maybe<String>;
  loginedAt?: Maybe<DateTimeInput>;
  photo?: Maybe<String>;
  bio?: Maybe<String>;
}

export interface UserBookCreateInput {
  user: UserCreateOneWithoutBooksInput;
  book: BookCreateOneInput;
  posts?: Maybe<PostCreateManyWithoutUserBookInput>;
  rating?: Maybe<Float>;
  readAt: DateTimeInput;
}

export interface UserBookUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBooksInput>;
  book?: Maybe<BookUpdateOneRequiredInput>;
  posts?: Maybe<PostUpdateManyWithoutUserBookInput>;
  rating?: Maybe<Float>;
  readAt?: Maybe<DateTimeInput>;
}

export interface UserBookUpdateManyMutationInput {
  rating?: Maybe<Float>;
  readAt?: Maybe<DateTimeInput>;
}

export interface BookSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BookWhereInput>;
  AND?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  OR?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
  NOT?: Maybe<BookSubscriptionWhereInput[] | BookSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface SocialSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SocialWhereInput>;
  AND?: Maybe<SocialSubscriptionWhereInput[] | SocialSubscriptionWhereInput>;
  OR?: Maybe<SocialSubscriptionWhereInput[] | SocialSubscriptionWhereInput>;
  NOT?: Maybe<SocialSubscriptionWhereInput[] | SocialSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserBookSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserBookWhereInput>;
  AND?: Maybe<
    UserBookSubscriptionWhereInput[] | UserBookSubscriptionWhereInput
  >;
  OR?: Maybe<UserBookSubscriptionWhereInput[] | UserBookSubscriptionWhereInput>;
  NOT?: Maybe<
    UserBookSubscriptionWhereInput[] | UserBookSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Book {
  id: ID_Output;
  title: String;
  isbn: String;
  author?: String;
  cover?: String;
  publisher?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BookPromise extends Promise<Book>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  isbn: () => Promise<String>;
  author: () => Promise<String>;
  cover: () => Promise<String>;
  publisher: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookSubscription
  extends Promise<AsyncIterator<Book>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  isbn: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
  publisher: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BookNullablePromise
  extends Promise<Book | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  isbn: () => Promise<String>;
  author: () => Promise<String>;
  cover: () => Promise<String>;
  publisher: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookConnection {
  pageInfo: PageInfo;
  edges: BookEdge[];
}

export interface BookConnectionPromise
  extends Promise<BookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookEdge>>() => T;
  aggregate: <T = AggregateBookPromise>() => T;
}

export interface BookConnectionSubscription
  extends Promise<AsyncIterator<BookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BookEdge {
  node: Book;
  cursor: String;
}

export interface BookEdgePromise extends Promise<BookEdge>, Fragmentable {
  node: <T = BookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookEdgeSubscription
  extends Promise<AsyncIterator<BookEdge>>,
    Fragmentable {
  node: <T = BookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBook {
  count: Int;
}

export interface AggregateBookPromise
  extends Promise<AggregateBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookSubscription
  extends Promise<AsyncIterator<AggregateBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Post {
  id: ID_Output;
  likes: Int;
  backgroundTheme?: String;
  content?: String;
  status?: FeedStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userBook: <T = UserBookPromise>() => T;
  likes: () => Promise<Int>;
  backgroundTheme: () => Promise<String>;
  content: () => Promise<String>;
  status: () => Promise<FeedStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  userBook: <T = UserBookSubscription>() => T;
  likes: () => Promise<AsyncIterator<Int>>;
  backgroundTheme: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<FeedStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userBook: <T = UserBookPromise>() => T;
  likes: () => Promise<Int>;
  backgroundTheme: () => Promise<String>;
  content: () => Promise<String>;
  status: () => Promise<FeedStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  email: String;
  nickname: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  loginedAt?: DateTimeOutput;
  photo?: String;
  bio?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  nickname: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  loginedAt: () => Promise<DateTimeOutput>;
  books: <T = FragmentableArray<UserBook>>(args?: {
    where?: UserBookWhereInput;
    orderBy?: UserBookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followed: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photo: () => Promise<String>;
  bio: () => Promise<String>;
  social: <T = SocialPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  loginedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  books: <T = Promise<AsyncIterator<UserBookSubscription>>>(args?: {
    where?: UserBookWhereInput;
    orderBy?: UserBookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followed: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photo: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  social: <T = SocialSubscription>() => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  nickname: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  loginedAt: () => Promise<DateTimeOutput>;
  books: <T = FragmentableArray<UserBook>>(args?: {
    where?: UserBookWhereInput;
    orderBy?: UserBookOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followed: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  photo: () => Promise<String>;
  bio: () => Promise<String>;
  social: <T = SocialPromise>() => T;
}

export interface UserBook {
  id: ID_Output;
  rating?: Float;
  readAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserBookPromise extends Promise<UserBook>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  book: <T = BookPromise>() => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rating: () => Promise<Float>;
  readAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserBookSubscription
  extends Promise<AsyncIterator<UserBook>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  book: <T = BookSubscription>() => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rating: () => Promise<AsyncIterator<Float>>;
  readAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserBookNullablePromise
  extends Promise<UserBook | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  book: <T = BookPromise>() => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rating: () => Promise<Float>;
  readAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Social {
  id: ID_Output;
  type: String;
  externalId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SocialPromise extends Promise<Social>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  user: <T = UserPromise>() => T;
  externalId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SocialSubscription
  extends Promise<AsyncIterator<Social>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  externalId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SocialNullablePromise
  extends Promise<Social | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  user: <T = UserPromise>() => T;
  externalId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SocialConnection {
  pageInfo: PageInfo;
  edges: SocialEdge[];
}

export interface SocialConnectionPromise
  extends Promise<SocialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SocialEdge>>() => T;
  aggregate: <T = AggregateSocialPromise>() => T;
}

export interface SocialConnectionSubscription
  extends Promise<AsyncIterator<SocialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SocialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSocialSubscription>() => T;
}

export interface SocialEdge {
  node: Social;
  cursor: String;
}

export interface SocialEdgePromise extends Promise<SocialEdge>, Fragmentable {
  node: <T = SocialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SocialEdgeSubscription
  extends Promise<AsyncIterator<SocialEdge>>,
    Fragmentable {
  node: <T = SocialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSocial {
  count: Int;
}

export interface AggregateSocialPromise
  extends Promise<AggregateSocial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSocialSubscription
  extends Promise<AsyncIterator<AggregateSocial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserBookConnection {
  pageInfo: PageInfo;
  edges: UserBookEdge[];
}

export interface UserBookConnectionPromise
  extends Promise<UserBookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserBookEdge>>() => T;
  aggregate: <T = AggregateUserBookPromise>() => T;
}

export interface UserBookConnectionSubscription
  extends Promise<AsyncIterator<UserBookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserBookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserBookSubscription>() => T;
}

export interface UserBookEdge {
  node: UserBook;
  cursor: String;
}

export interface UserBookEdgePromise
  extends Promise<UserBookEdge>,
    Fragmentable {
  node: <T = UserBookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserBookEdgeSubscription
  extends Promise<AsyncIterator<UserBookEdge>>,
    Fragmentable {
  node: <T = UserBookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserBook {
  count: Int;
}

export interface AggregateUserBookPromise
  extends Promise<AggregateUserBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserBookSubscription
  extends Promise<AsyncIterator<AggregateUserBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BookSubscriptionPayload {
  mutation: MutationType;
  node: Book;
  updatedFields: String[];
  previousValues: BookPreviousValues;
}

export interface BookSubscriptionPayloadPromise
  extends Promise<BookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPreviousValuesPromise>() => T;
}

export interface BookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPreviousValuesSubscription>() => T;
}

export interface BookPreviousValues {
  id: ID_Output;
  title: String;
  isbn: String;
  author?: String;
  cover?: String;
  publisher?: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BookPreviousValuesPromise
  extends Promise<BookPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  isbn: () => Promise<String>;
  author: () => Promise<String>;
  cover: () => Promise<String>;
  publisher: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  isbn: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  cover: () => Promise<AsyncIterator<String>>;
  publisher: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  likes: Int;
  backgroundTheme?: String;
  content?: String;
  status?: FeedStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  likes: () => Promise<Int>;
  backgroundTheme: () => Promise<String>;
  content: () => Promise<String>;
  status: () => Promise<FeedStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  likes: () => Promise<AsyncIterator<Int>>;
  backgroundTheme: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<FeedStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SocialSubscriptionPayload {
  mutation: MutationType;
  node: Social;
  updatedFields: String[];
  previousValues: SocialPreviousValues;
}

export interface SocialSubscriptionPayloadPromise
  extends Promise<SocialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SocialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SocialPreviousValuesPromise>() => T;
}

export interface SocialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SocialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SocialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SocialPreviousValuesSubscription>() => T;
}

export interface SocialPreviousValues {
  id: ID_Output;
  type: String;
  externalId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SocialPreviousValuesPromise
  extends Promise<SocialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  externalId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SocialPreviousValuesSubscription
  extends Promise<AsyncIterator<SocialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  externalId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  nickname: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  loginedAt?: DateTimeOutput;
  photo?: String;
  bio?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  nickname: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  loginedAt: () => Promise<DateTimeOutput>;
  photo: () => Promise<String>;
  bio: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  loginedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  photo: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
}

export interface UserBookSubscriptionPayload {
  mutation: MutationType;
  node: UserBook;
  updatedFields: String[];
  previousValues: UserBookPreviousValues;
}

export interface UserBookSubscriptionPayloadPromise
  extends Promise<UserBookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserBookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserBookPreviousValuesPromise>() => T;
}

export interface UserBookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserBookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserBookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserBookPreviousValuesSubscription>() => T;
}

export interface UserBookPreviousValues {
  id: ID_Output;
  rating?: Float;
  readAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserBookPreviousValuesPromise
  extends Promise<UserBookPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Float>;
  readAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserBookPreviousValuesSubscription
  extends Promise<AsyncIterator<UserBookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Float>>;
  readAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Social",
    embedded: false
  },
  {
    name: "Book",
    embedded: false
  },
  {
    name: "UserBook",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "FeedStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://127.0.0.1:4466`
});
export const prisma = new Prisma();
