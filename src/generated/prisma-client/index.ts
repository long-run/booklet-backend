// Code generated by Prisma (prisma@1.27.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  book: (where?: BookWhereInput) => Promise<boolean>;
  bookFeed: (where?: BookFeedWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  books: (
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Book>;
  booksConnection: (
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BookConnectionPromise;
  bookFeed: (where: BookFeedWhereUniqueInput) => BookFeedPromise;
  bookFeeds: (
    args?: {
      where?: BookFeedWhereInput;
      orderBy?: BookFeedOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<BookFeed>;
  bookFeedsConnection: (
    args?: {
      where?: BookFeedWhereInput;
      orderBy?: BookFeedOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BookFeedConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBook: (data: BookCreateInput) => BookPromise;
  updateManyBooks: (
    args: { data: BookUpdateManyMutationInput; where?: BookWhereInput }
  ) => BatchPayloadPromise;
  deleteManyBooks: (where?: BookWhereInput) => BatchPayloadPromise;
  createBookFeed: (data: BookFeedCreateInput) => BookFeedPromise;
  updateBookFeed: (
    args: { data: BookFeedUpdateInput; where: BookFeedWhereUniqueInput }
  ) => BookFeedPromise;
  updateManyBookFeeds: (
    args: { data: BookFeedUpdateManyMutationInput; where?: BookFeedWhereInput }
  ) => BatchPayloadPromise;
  upsertBookFeed: (
    args: {
      where: BookFeedWhereUniqueInput;
      create: BookFeedCreateInput;
      update: BookFeedUpdateInput;
    }
  ) => BookFeedPromise;
  deleteBookFeed: (where: BookFeedWhereUniqueInput) => BookFeedPromise;
  deleteManyBookFeeds: (where?: BookFeedWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  book: (
    where?: BookSubscriptionWhereInput
  ) => BookSubscriptionPayloadSubscription;
  bookFeed: (
    where?: BookFeedSubscriptionWhereInput
  ) => BookFeedSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FeedStatus = "currently_reading" | "read" | "want_to_read";

export type BookFeedOrderByInput =
  | "idx_ASC"
  | "idx_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "status_ASC"
  | "status_DESC"
  | "background_theme_ASC"
  | "background_theme_DESC"
  | "note_ASC"
  | "note_DESC"
  | "reg_date_ASC"
  | "reg_date_DESC"
  | "modified_date_ASC"
  | "modified_date_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BookOrderByInput =
  | "title_ASC"
  | "title_DESC"
  | "isbn_ASC"
  | "isbn_DESC"
  | "author_ASC"
  | "author_DESC"
  | "book_cover_ASC"
  | "book_cover_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "like_count_ASC"
  | "like_count_DESC"
  | "liked_ASC"
  | "liked_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "u_idx_ASC"
  | "u_idx_DESC"
  | "u_id_ASC"
  | "u_id_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
}

export interface BookFeedUpdateInput {
  idx?: String;
  book?: BookUpdateOneRequiredInput;
  rating?: Int;
  status?: FeedStatus;
  background_theme?: String;
  note?: String;
  reg_date?: String;
  modified_date?: String;
}

export interface PostUpdateInput {
  user?: UserUpdateOneRequiredInput;
  bookfeed?: BookFeedUpdateOneRequiredInput;
  like_count?: Int;
  liked?: Boolean;
}

export interface BookWhereInput {
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  isbn?: String;
  isbn_not?: String;
  isbn_in?: String[] | String;
  isbn_not_in?: String[] | String;
  isbn_lt?: String;
  isbn_lte?: String;
  isbn_gt?: String;
  isbn_gte?: String;
  isbn_contains?: String;
  isbn_not_contains?: String;
  isbn_starts_with?: String;
  isbn_not_starts_with?: String;
  isbn_ends_with?: String;
  isbn_not_ends_with?: String;
  author?: String;
  author_not?: String;
  author_in?: String[] | String;
  author_not_in?: String[] | String;
  author_lt?: String;
  author_lte?: String;
  author_gt?: String;
  author_gte?: String;
  author_contains?: String;
  author_not_contains?: String;
  author_starts_with?: String;
  author_not_starts_with?: String;
  author_ends_with?: String;
  author_not_ends_with?: String;
  book_cover?: String;
  book_cover_not?: String;
  book_cover_in?: String[] | String;
  book_cover_not_in?: String[] | String;
  book_cover_lt?: String;
  book_cover_lte?: String;
  book_cover_gt?: String;
  book_cover_gte?: String;
  book_cover_contains?: String;
  book_cover_not_contains?: String;
  book_cover_starts_with?: String;
  book_cover_not_starts_with?: String;
  book_cover_ends_with?: String;
  book_cover_not_ends_with?: String;
  AND?: BookWhereInput[] | BookWhereInput;
  OR?: BookWhereInput[] | BookWhereInput;
  NOT?: BookWhereInput[] | BookWhereInput;
}

export interface BookFeedCreateOneInput {
  create?: BookFeedCreateInput;
  connect?: BookFeedWhereUniqueInput;
}

export interface PostUpdateManyMutationInput {
  like_count?: Int;
  liked?: Boolean;
}

export interface UserCreateInput {
  u_idx: String;
  u_id: String;
}

export interface BookFeedUpsertNestedInput {
  update: BookFeedUpdateDataInput;
  create: BookFeedCreateInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface BookFeedWhereInput {
  idx?: String;
  idx_not?: String;
  idx_in?: String[] | String;
  idx_not_in?: String[] | String;
  idx_lt?: String;
  idx_lte?: String;
  idx_gt?: String;
  idx_gte?: String;
  idx_contains?: String;
  idx_not_contains?: String;
  idx_starts_with?: String;
  idx_not_starts_with?: String;
  idx_ends_with?: String;
  idx_not_ends_with?: String;
  book?: BookWhereInput;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  status?: FeedStatus;
  status_not?: FeedStatus;
  status_in?: FeedStatus[] | FeedStatus;
  status_not_in?: FeedStatus[] | FeedStatus;
  background_theme?: String;
  background_theme_not?: String;
  background_theme_in?: String[] | String;
  background_theme_not_in?: String[] | String;
  background_theme_lt?: String;
  background_theme_lte?: String;
  background_theme_gt?: String;
  background_theme_gte?: String;
  background_theme_contains?: String;
  background_theme_not_contains?: String;
  background_theme_starts_with?: String;
  background_theme_not_starts_with?: String;
  background_theme_ends_with?: String;
  background_theme_not_ends_with?: String;
  note?: String;
  note_not?: String;
  note_in?: String[] | String;
  note_not_in?: String[] | String;
  note_lt?: String;
  note_lte?: String;
  note_gt?: String;
  note_gte?: String;
  note_contains?: String;
  note_not_contains?: String;
  note_starts_with?: String;
  note_not_starts_with?: String;
  note_ends_with?: String;
  note_not_ends_with?: String;
  reg_date?: String;
  reg_date_not?: String;
  reg_date_in?: String[] | String;
  reg_date_not_in?: String[] | String;
  reg_date_lt?: String;
  reg_date_lte?: String;
  reg_date_gt?: String;
  reg_date_gte?: String;
  reg_date_contains?: String;
  reg_date_not_contains?: String;
  reg_date_starts_with?: String;
  reg_date_not_starts_with?: String;
  reg_date_ends_with?: String;
  reg_date_not_ends_with?: String;
  modified_date?: String;
  modified_date_not?: String;
  modified_date_in?: String[] | String;
  modified_date_not_in?: String[] | String;
  modified_date_lt?: String;
  modified_date_lte?: String;
  modified_date_gt?: String;
  modified_date_gte?: String;
  modified_date_contains?: String;
  modified_date_not_contains?: String;
  modified_date_starts_with?: String;
  modified_date_not_starts_with?: String;
  modified_date_ends_with?: String;
  modified_date_not_ends_with?: String;
  AND?: BookFeedWhereInput[] | BookFeedWhereInput;
  OR?: BookFeedWhereInput[] | BookFeedWhereInput;
  NOT?: BookFeedWhereInput[] | BookFeedWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
}

export interface BookFeedUpdateDataInput {
  idx?: String;
  book?: BookUpdateOneRequiredInput;
  rating?: Int;
  status?: FeedStatus;
  background_theme?: String;
  note?: String;
  reg_date?: String;
  modified_date?: String;
}

export interface PostCreateInput {
  user: UserCreateOneInput;
  bookfeed: BookFeedCreateOneInput;
  like_count?: Int;
  liked?: Boolean;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface BookFeedUpdateManyMutationInput {
  idx?: String;
  rating?: Int;
  status?: FeedStatus;
  background_theme?: String;
  note?: String;
  reg_date?: String;
  modified_date?: String;
}

export interface UserUpdateDataInput {
  u_idx?: String;
  u_id?: String;
}

export interface BookUpsertNestedInput {
  update: BookUpdateDataInput;
  create: BookCreateInput;
}

export interface PostWhereInput {
  id?: String;
  id_not?: String;
  id_in?: String[] | String;
  id_not_in?: String[] | String;
  id_lt?: String;
  id_lte?: String;
  id_gt?: String;
  id_gte?: String;
  id_contains?: String;
  id_not_contains?: String;
  id_starts_with?: String;
  id_not_starts_with?: String;
  id_ends_with?: String;
  id_not_ends_with?: String;
  user?: UserWhereInput;
  bookfeed?: BookFeedWhereInput;
  like_count?: Int;
  like_count_not?: Int;
  like_count_in?: Int[] | Int;
  like_count_not_in?: Int[] | Int;
  like_count_lt?: Int;
  like_count_lte?: Int;
  like_count_gt?: Int;
  like_count_gte?: Int;
  liked?: Boolean;
  liked_not?: Boolean;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface UserUpdateManyMutationInput {
  u_idx?: String;
  u_id?: String;
}

export interface BookCreateInput {
  title: String;
  isbn: String;
  author: String;
  book_cover: String;
}

export interface BookFeedUpdateOneRequiredInput {
  create?: BookFeedCreateInput;
  update?: BookFeedUpdateDataInput;
  upsert?: BookFeedUpsertNestedInput;
  connect?: BookFeedWhereUniqueInput;
}

export interface BookUpdateManyMutationInput {
  title?: String;
  isbn?: String;
  author?: String;
  book_cover?: String;
}

export interface BookFeedSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BookFeedWhereInput;
  AND?: BookFeedSubscriptionWhereInput[] | BookFeedSubscriptionWhereInput;
  OR?: BookFeedSubscriptionWhereInput[] | BookFeedSubscriptionWhereInput;
  NOT?: BookFeedSubscriptionWhereInput[] | BookFeedSubscriptionWhereInput;
}

export interface BookCreateOneInput {
  create?: BookCreateInput;
}

export interface BookFeedCreateInput {
  idx: String;
  book: BookCreateOneInput;
  rating: Int;
  status: FeedStatus;
  background_theme: String;
  note: String;
  reg_date: String;
  modified_date: String;
}

export interface BookUpdateOneRequiredInput {
  create?: BookCreateInput;
  update?: BookUpdateDataInput;
  upsert?: BookUpsertNestedInput;
}

export interface BookUpdateDataInput {
  title?: String;
  isbn?: String;
  author?: String;
  book_cover?: String;
}

export interface UserWhereInput {
  u_idx?: String;
  u_idx_not?: String;
  u_idx_in?: String[] | String;
  u_idx_not_in?: String[] | String;
  u_idx_lt?: String;
  u_idx_lte?: String;
  u_idx_gt?: String;
  u_idx_gte?: String;
  u_idx_contains?: String;
  u_idx_not_contains?: String;
  u_idx_starts_with?: String;
  u_idx_not_starts_with?: String;
  u_idx_ends_with?: String;
  u_idx_not_ends_with?: String;
  u_id?: String;
  u_id_not?: String;
  u_id_in?: String[] | String;
  u_id_not_in?: String[] | String;
  u_id_lt?: String;
  u_id_lte?: String;
  u_id_gt?: String;
  u_id_gte?: String;
  u_id_contains?: String;
  u_id_not_contains?: String;
  u_id_starts_with?: String;
  u_id_not_starts_with?: String;
  u_id_ends_with?: String;
  u_id_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: String;
}>;

export interface BookSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BookWhereInput;
  AND?: BookSubscriptionWhereInput[] | BookSubscriptionWhereInput;
  OR?: BookSubscriptionWhereInput[] | BookSubscriptionWhereInput;
  NOT?: BookSubscriptionWhereInput[] | BookSubscriptionWhereInput;
}

export type BookFeedWhereUniqueInput = AtLeastOne<{
  idx: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateBook {
  count: Int;
}

export interface AggregateBookPromise
  extends Promise<AggregateBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookSubscription
  extends Promise<AsyncIterator<AggregateBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPreviousValues {
  u_idx: String;
  u_id: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  u_idx: () => Promise<String>;
  u_id: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  u_idx: () => Promise<AsyncIterator<String>>;
  u_id: () => Promise<AsyncIterator<String>>;
}

export interface BookFeed {
  idx: String;
  rating: Int;
  status: FeedStatus;
  background_theme: String;
  note: String;
  reg_date: String;
  modified_date: String;
}

export interface BookFeedPromise extends Promise<BookFeed>, Fragmentable {
  idx: () => Promise<String>;
  book: <T = BookPromise>() => T;
  rating: () => Promise<Int>;
  status: () => Promise<FeedStatus>;
  background_theme: () => Promise<String>;
  note: () => Promise<String>;
  reg_date: () => Promise<String>;
  modified_date: () => Promise<String>;
}

export interface BookFeedSubscription
  extends Promise<AsyncIterator<BookFeed>>,
    Fragmentable {
  idx: () => Promise<AsyncIterator<String>>;
  book: <T = BookSubscription>() => T;
  rating: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<FeedStatus>>;
  background_theme: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  reg_date: () => Promise<AsyncIterator<String>>;
  modified_date: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface BookEdge {
  node: Book;
  cursor: String;
}

export interface BookEdgePromise extends Promise<BookEdge>, Fragmentable {
  node: <T = BookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookEdgeSubscription
  extends Promise<AsyncIterator<BookEdge>>,
    Fragmentable {
  node: <T = BookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PostPreviousValues {
  id: String;
  like_count: Int;
  liked: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<String>;
  like_count: () => Promise<Int>;
  liked: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<String>>;
  like_count: () => Promise<AsyncIterator<Int>>;
  liked: () => Promise<AsyncIterator<Boolean>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  u_idx: String;
  u_id: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  u_idx: () => Promise<String>;
  u_id: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  u_idx: () => Promise<AsyncIterator<String>>;
  u_id: () => Promise<AsyncIterator<String>>;
}

export interface BookSubscriptionPayload {
  mutation: MutationType;
  node: Book;
  updatedFields: String[];
  previousValues: BookPreviousValues;
}

export interface BookSubscriptionPayloadPromise
  extends Promise<BookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPreviousValuesPromise>() => T;
}

export interface BookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPreviousValuesSubscription>() => T;
}

export interface AggregateBookFeed {
  count: Int;
}

export interface AggregateBookFeedPromise
  extends Promise<AggregateBookFeed>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookFeedSubscription
  extends Promise<AsyncIterator<AggregateBookFeed>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BookPreviousValues {
  title: String;
  isbn: String;
  author: String;
  book_cover: String;
}

export interface BookPreviousValuesPromise
  extends Promise<BookPreviousValues>,
    Fragmentable {
  title: () => Promise<String>;
  isbn: () => Promise<String>;
  author: () => Promise<String>;
  book_cover: () => Promise<String>;
}

export interface BookPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPreviousValues>>,
    Fragmentable {
  title: () => Promise<AsyncIterator<String>>;
  isbn: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  book_cover: () => Promise<AsyncIterator<String>>;
}

export interface BookFeedConnection {
  pageInfo: PageInfo;
  edges: BookFeedEdge[];
}

export interface BookFeedConnectionPromise
  extends Promise<BookFeedConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookFeedEdge>>() => T;
  aggregate: <T = AggregateBookFeedPromise>() => T;
}

export interface BookFeedConnectionSubscription
  extends Promise<AsyncIterator<BookFeedConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookFeedEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookFeedSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Book {
  title: String;
  isbn: String;
  author: String;
  book_cover: String;
}

export interface BookPromise extends Promise<Book>, Fragmentable {
  title: () => Promise<String>;
  isbn: () => Promise<String>;
  author: () => Promise<String>;
  book_cover: () => Promise<String>;
}

export interface BookSubscription
  extends Promise<AsyncIterator<Book>>,
    Fragmentable {
  title: () => Promise<AsyncIterator<String>>;
  isbn: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  book_cover: () => Promise<AsyncIterator<String>>;
}

export interface BookFeedPreviousValues {
  idx: String;
  rating: Int;
  status: FeedStatus;
  background_theme: String;
  note: String;
  reg_date: String;
  modified_date: String;
}

export interface BookFeedPreviousValuesPromise
  extends Promise<BookFeedPreviousValues>,
    Fragmentable {
  idx: () => Promise<String>;
  rating: () => Promise<Int>;
  status: () => Promise<FeedStatus>;
  background_theme: () => Promise<String>;
  note: () => Promise<String>;
  reg_date: () => Promise<String>;
  modified_date: () => Promise<String>;
}

export interface BookFeedPreviousValuesSubscription
  extends Promise<AsyncIterator<BookFeedPreviousValues>>,
    Fragmentable {
  idx: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<FeedStatus>>;
  background_theme: () => Promise<AsyncIterator<String>>;
  note: () => Promise<AsyncIterator<String>>;
  reg_date: () => Promise<AsyncIterator<String>>;
  modified_date: () => Promise<AsyncIterator<String>>;
}

export interface BookFeedSubscriptionPayload {
  mutation: MutationType;
  node: BookFeed;
  updatedFields: String[];
  previousValues: BookFeedPreviousValues;
}

export interface BookFeedSubscriptionPayloadPromise
  extends Promise<BookFeedSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookFeedPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookFeedPreviousValuesPromise>() => T;
}

export interface BookFeedSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookFeedSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookFeedSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookFeedPreviousValuesSubscription>() => T;
}

export interface BookConnection {
  pageInfo: PageInfo;
  edges: BookEdge[];
}

export interface BookConnectionPromise
  extends Promise<BookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookEdge>>() => T;
  aggregate: <T = AggregateBookPromise>() => T;
}

export interface BookConnectionSubscription
  extends Promise<AsyncIterator<BookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BookFeedEdge {
  node: BookFeed;
  cursor: String;
}

export interface BookFeedEdgePromise
  extends Promise<BookFeedEdge>,
    Fragmentable {
  node: <T = BookFeedPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookFeedEdgeSubscription
  extends Promise<AsyncIterator<BookFeedEdge>>,
    Fragmentable {
  node: <T = BookFeedSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: String;
  like_count: Int;
  liked: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<String>;
  user: <T = UserPromise>() => T;
  bookfeed: <T = BookFeedPromise>() => T;
  like_count: () => Promise<Int>;
  liked: () => Promise<Boolean>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  bookfeed: <T = BookFeedSubscription>() => T;
  like_count: () => Promise<AsyncIterator<Int>>;
  liked: () => Promise<AsyncIterator<Boolean>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "BookFeed",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Book",
    embedded: false
  },
  {
    name: "FeedStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/public-phasegrasp-699/booklet-backend/dev`
});
export const prisma = new Prisma();
