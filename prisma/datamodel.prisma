type User {
  id: ID! @unique
  email: String! @unique
	nickname: String! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
	loginedAt: DateTime
  books: [UserBook!] @relation(name: "UserBookByUser" onDelete: CASCADE)
  posts: [Post!] @relation(name: "PostsByUser" onDelete: CASCADE)
	following: [User!] @relation(name: "FollowingToUser" onDelete: CASCADE)
	followed: [User!] @relation(name: "FollowedFromUser" onDelete: CASCADE)
	photo: String
	bio: String
	social: Social
}

type Social {
	id: ID! @unique
	type: String!
	user: User!
	externalId: String!
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Book {
  id: ID! @unique
  title: String!
  isbn: String! @unique
  author: String @default(value: "")
  cover: String @default(value: "")
  publisher: String @default(value: "")
  description: String @default(value: "")
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserBook {
  id: ID! @unique
  user: User! @relation(name: "UserBookByUser")
  book: Book!
  posts: [Post!]! @relation(name: "PostsByUserBooks" onDelete: CASCADE)
  rating: Float @default(value: 0.0)
  readAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: ID! @unique
  user: User! @relation(name: "PostsByUser")
  userBook: UserBook! @relation(name: "PostsByUserBooks")
  likes: Int! @default(value: 0)
  backgroundTheme: String @default(value: "")
  content: String @default(value: "")
	status: FeedStatus @default(value: "WANT_TO_READ")
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum FeedStatus {
  CURRENT_READING,
  READ,
  WANT_TO_READ
}
